{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-7a6f551313d0fb2431f7ad988c1b89345f9cf227",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/EventRouter.sol": "project/contracts/EventRouter.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 1
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@pythnetwork/entropy-sdk-solidity/=npm/@pythnetwork/entropy-sdk-solidity@2.1.0/",
        "project/:@pythnetwork/entropy-sdk-solidity/=npm/@pythnetwork/entropy-sdk-solidity@2.1.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.1.0/EntropyEvents.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./EntropyStructs.sol\";\n\n// Deprecated -- these events are still emitted, but the lack of indexing\n// makes them hard to use.\ninterface EntropyEvents {\n    event Registered(EntropyStructs.ProviderInfo provider);\n\n    event Requested(EntropyStructs.Request request);\n    event RequestedWithCallback(\n        address indexed provider,\n        address indexed requestor,\n        uint64 indexed sequenceNumber,\n        bytes32 userRandomNumber,\n        EntropyStructs.Request request\n    );\n\n    event Revealed(\n        EntropyStructs.Request request,\n        bytes32 userRevelation,\n        bytes32 providerRevelation,\n        bytes32 blockHash,\n        bytes32 randomNumber\n    );\n    event RevealedWithCallback(\n        EntropyStructs.Request request,\n        bytes32 userRandomNumber,\n        bytes32 providerRevelation,\n        bytes32 randomNumber\n    );\n\n    event CallbackFailed(\n        address indexed provider,\n        address indexed requestor,\n        uint64 indexed sequenceNumber,\n        bytes32 userRandomNumber,\n        bytes32 providerRevelation,\n        bytes32 randomNumber,\n        bytes errorCode\n    );\n\n    event ProviderFeeUpdated(address provider, uint128 oldFee, uint128 newFee);\n\n    event ProviderDefaultGasLimitUpdated(\n        address indexed provider,\n        uint32 oldDefaultGasLimit,\n        uint32 newDefaultGasLimit\n    );\n\n    event ProviderUriUpdated(address provider, bytes oldUri, bytes newUri);\n\n    event ProviderFeeManagerUpdated(\n        address provider,\n        address oldFeeManager,\n        address newFeeManager\n    );\n    event ProviderMaxNumHashesAdvanced(\n        address provider,\n        uint32 oldMaxNumHashes,\n        uint32 newMaxNumHashes\n    );\n\n    event Withdrawal(\n        address provider,\n        address recipient,\n        uint128 withdrawnAmount\n    );\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.1.0/EntropyEventsV2.sol": {
        "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\nimport \"./EntropyStructs.sol\";\n\n/**\n * @title EntropyEventsV2\n * @notice Interface defining events for the Entropy V2 system, which handles random number generation\n * and provider management on Ethereum.\n * @dev This interface is used to emit events that track the lifecycle of random number requests,\n * provider registrations, and system configurations.\n */\ninterface EntropyEventsV2 {\n    /**\n     * @notice Emitted when a new provider registers with the Entropy system\n     * @param provider The address of the registered provider\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event Registered(address indexed provider, bytes extraArgs);\n\n    /**\n     * @notice Emitted when a user requests a random number from a provider\n     * @param provider The address of the provider handling the request\n     * @param caller The address of the user requesting the random number\n     * @param sequenceNumber A unique identifier for this request\n     * @param userContribution The user's contribution to the random number\n     * @param gasLimit The gas limit for the callback.\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event Requested(\n        address indexed provider,\n        address indexed caller,\n        uint64 indexed sequenceNumber,\n        bytes32 userContribution,\n        uint32 gasLimit,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider reveals the generated random number\n     * @param provider The address of the provider that generated the random number\n     * @param caller The address of the user who requested the random number (and who receives a callback)\n     * @param sequenceNumber The unique identifier of the request\n     * @param randomNumber The generated random number\n     * @param userContribution The user's contribution to the random number\n     * @param providerContribution The provider's contribution to the random number\n     * @param callbackFailed Whether the callback to the caller failed\n     * @param callbackReturnValue Return value from the callback. If the callback failed, this field contains\n     * the error code and any additional returned data. Note that \"\" often indicates an out-of-gas error.\n     * If the callback returns more than 256 bytes, only the first 256 bytes of the callback return value are included.\n     * @param callbackGasUsed How much gas the callback used.\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event Revealed(\n        address indexed provider,\n        address indexed caller,\n        uint64 indexed sequenceNumber,\n        bytes32 randomNumber,\n        bytes32 userContribution,\n        bytes32 providerContribution,\n        bool callbackFailed,\n        bytes callbackReturnValue,\n        uint32 callbackGasUsed,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider updates their fee\n     * @param provider The address of the provider updating their fee\n     * @param oldFee The previous fee amount\n     * @param newFee The new fee amount\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event ProviderFeeUpdated(\n        address indexed provider,\n        uint128 oldFee,\n        uint128 newFee,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider updates their default gas limit\n     * @param provider The address of the provider updating their gas limit\n     * @param oldDefaultGasLimit The previous default gas limit\n     * @param newDefaultGasLimit The new default gas limit\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event ProviderDefaultGasLimitUpdated(\n        address indexed provider,\n        uint32 oldDefaultGasLimit,\n        uint32 newDefaultGasLimit,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider updates their URI\n     * @param provider The address of the provider updating their URI\n     * @param oldUri The previous URI\n     * @param newUri The new URI\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event ProviderUriUpdated(\n        address indexed provider,\n        bytes oldUri,\n        bytes newUri,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider updates their fee manager address\n     * @param provider The address of the provider updating their fee manager\n     * @param oldFeeManager The previous fee manager address\n     * @param newFeeManager The new fee manager address\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event ProviderFeeManagerUpdated(\n        address indexed provider,\n        address oldFeeManager,\n        address newFeeManager,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider updates their maximum number of hashes that can be advanced\n     * @param provider The address of the provider updating their max hashes\n     * @param oldMaxNumHashes The previous maximum number of hashes\n     * @param newMaxNumHashes The new maximum number of hashes\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event ProviderMaxNumHashesAdvanced(\n        address indexed provider,\n        uint32 oldMaxNumHashes,\n        uint32 newMaxNumHashes,\n        bytes extraArgs\n    );\n\n    /**\n     * @notice Emitted when a provider withdraws their accumulated fees\n     * @param provider The address of the provider withdrawing fees\n     * @param recipient The address receiving the withdrawn fees\n     * @param withdrawnAmount The amount of fees withdrawn\n     * @param extraArgs A field for extra data for forward compatibility.\n     */\n    event Withdrawal(\n        address indexed provider,\n        address indexed recipient,\n        uint128 withdrawnAmount,\n        bytes extraArgs\n    );\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.1.0/EntropyStructs.sol": {
        "content": "// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\n// This contract holds old versions of the Entropy structs that are no longer used for contract storage.\n// However, they are still used in EntropyEvents to maintain the public interface of prior versions of\n// the Entropy contract.\n//\n// See EntropyStructsV2 for the struct definitions currently in use.\ncontract EntropyStructs {\n    struct ProviderInfo {\n        uint128 feeInWei;\n        uint128 accruedFeesInWei;\n        // The commitment that the provider posted to the blockchain, and the sequence number\n        // where they committed to this. This value is not advanced after the provider commits,\n        // and instead is stored to help providers track where they are in the hash chain.\n        bytes32 originalCommitment;\n        uint64 originalCommitmentSequenceNumber;\n        // Metadata for the current commitment. Providers may optionally use this field to help\n        // manage rotations (i.e., to pick the sequence number from the correct hash chain).\n        bytes commitmentMetadata;\n        // Optional URI where clients can retrieve revelations for the provider.\n        // Client SDKs can use this field to automatically determine how to retrieve random values for each provider.\n        // TODO: specify the API that must be implemented at this URI\n        bytes uri;\n        // The first sequence number that is *not* included in the current commitment (i.e., an exclusive end index).\n        // The contract maintains the invariant that sequenceNumber <= endSequenceNumber.\n        // If sequenceNumber == endSequenceNumber, the provider must rotate their commitment to add additional random values.\n        uint64 endSequenceNumber;\n        // The sequence number that will be assigned to the next inbound user request.\n        uint64 sequenceNumber;\n        // The current commitment represents an index/value in the provider's hash chain.\n        // These values are used to verify requests for future sequence numbers. Note that\n        // currentCommitmentSequenceNumber < sequenceNumber.\n        //\n        // The currentCommitment advances forward through the provider's hash chain as values\n        // are revealed on-chain.\n        bytes32 currentCommitment;\n        uint64 currentCommitmentSequenceNumber;\n        // An address that is authorized to set / withdraw fees on behalf of this provider.\n        address feeManager;\n        // Maximum number of hashes to record in a request. This should be set according to the maximum gas limit\n        // the provider supports for callbacks.\n        uint32 maxNumHashes;\n    }\n\n    struct Request {\n        // Storage slot 1 //\n        address provider;\n        uint64 sequenceNumber;\n        // The number of hashes required to verify the provider revelation.\n        uint32 numHashes;\n        // Storage slot 2 //\n        // The commitment is keccak256(userCommitment, providerCommitment). Storing the hash instead of both saves 20k gas by\n        // eliminating 1 store.\n        bytes32 commitment;\n        // Storage slot 3 //\n        // The number of the block where this request was created.\n        // Note that we're using a uint64 such that we have an additional space for an address and other fields in\n        // this storage slot. Although block.number returns a uint256, 64 bits should be plenty to index all of the\n        // blocks ever generated.\n        uint64 blockNumber;\n        // The address that requested this random number.\n        address requester;\n        // If true, incorporate the blockhash of blockNumber into the generated random value.\n        bool useBlockhash;\n        // True if this is a request that expects a callback.\n        bool isRequestWithCallback;\n    }\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.1.0/EntropyStructsV2.sol": {
        "content": "// SPDX-License-Identifier: Apache 2\n\npragma solidity ^0.8.0;\n\ncontract EntropyStructsV2 {\n    struct ProviderInfo {\n        uint128 feeInWei;\n        uint128 accruedFeesInWei;\n        // The commitment that the provider posted to the blockchain, and the sequence number\n        // where they committed to this. This value is not advanced after the provider commits,\n        // and instead is stored to help providers track where they are in the hash chain.\n        bytes32 originalCommitment;\n        uint64 originalCommitmentSequenceNumber;\n        // Metadata for the current commitment. Providers may optionally use this field to help\n        // manage rotations (i.e., to pick the sequence number from the correct hash chain).\n        bytes commitmentMetadata;\n        // Optional URI where clients can retrieve revelations for the provider.\n        // Client SDKs can use this field to automatically determine how to retrieve random values for each provider.\n        // TODO: specify the API that must be implemented at this URI\n        bytes uri;\n        // The first sequence number that is *not* included in the current commitment (i.e., an exclusive end index).\n        // The contract maintains the invariant that sequenceNumber <= endSequenceNumber.\n        // If sequenceNumber == endSequenceNumber, the provider must rotate their commitment to add additional random values.\n        uint64 endSequenceNumber;\n        // The sequence number that will be assigned to the next inbound user request.\n        uint64 sequenceNumber;\n        // The current commitment represents an index/value in the provider's hash chain.\n        // These values are used to verify requests for future sequence numbers. Note that\n        // currentCommitmentSequenceNumber < sequenceNumber.\n        //\n        // The currentCommitment advances forward through the provider's hash chain as values\n        // are revealed on-chain.\n        bytes32 currentCommitment;\n        uint64 currentCommitmentSequenceNumber;\n        // An address that is authorized to set / withdraw fees on behalf of this provider.\n        address feeManager;\n        // Maximum number of hashes to record in a request. This should be set according to the maximum gas limit\n        // the provider supports for callbacks.\n        uint32 maxNumHashes;\n        // Default gas limit to use for callbacks.\n        uint32 defaultGasLimit;\n    }\n\n    struct Request {\n        // Storage slot 1 //\n        address provider;\n        uint64 sequenceNumber;\n        // The number of hashes required to verify the provider revelation.\n        uint32 numHashes;\n        // Storage slot 2 //\n        // The commitment is keccak256(userCommitment, providerCommitment). Storing the hash instead of both saves 20k gas by\n        // eliminating 1 store.\n        bytes32 commitment;\n        // Storage slot 3 //\n        // The number of the block where this request was created.\n        // Note that we're using a uint64 such that we have an additional space for an address and other fields in\n        // this storage slot. Although block.number returns a uint256, 64 bits should be plenty to index all of the\n        // blocks ever generated.\n        uint64 blockNumber;\n        // The address that requested this random number.\n        address requester;\n        // If true, incorporate the blockhash of blockNumber into the generated random value.\n        bool useBlockhash;\n        // Status flag for requests with callbacks. See EntropyConstants for the possible values of this flag.\n        uint8 callbackStatus;\n        // The gasLimit in units of 10k gas. (i.e., 2 = 20k gas). We're using units of 10k in order to fit this\n        // field into the remaining 2 bytes of this storage slot. The dynamic range here is 10k - 655M, which should\n        // cover all real-world use cases.\n        uint16 gasLimit10k;\n    }\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.1.0/IEntropyConsumer.sol": {
        "content": "// SPDX-License-Identifier: Apache 2\npragma solidity ^0.8.0;\n\nabstract contract IEntropyConsumer {\n    // This method is called by Entropy to provide the random number to the consumer.\n    // It asserts that the msg.sender is the Entropy contract. It is not meant to be\n    // override by the consumer.\n    function _entropyCallback(\n        uint64 sequence,\n        address provider,\n        bytes32 randomNumber\n    ) external {\n        address entropy = getEntropy();\n        require(entropy != address(0), \"Entropy address not set\");\n        require(msg.sender == entropy, \"Only Entropy can call this function\");\n\n        entropyCallback(sequence, provider, randomNumber);\n    }\n\n    // getEntropy returns Entropy contract address. The method is being used to check that the\n    // callback is indeed from Entropy contract. The consumer is expected to implement this method.\n    // Entropy address can be found here - https://docs.pyth.network/entropy/contract-addresses\n    function getEntropy() internal view virtual returns (address);\n\n    // This method is expected to be implemented by the consumer to handle the random number.\n    // It will be called by _entropyCallback after _entropyCallback ensures that the call is\n    // indeed from Entropy contract.\n    function entropyCallback(\n        uint64 sequence,\n        address provider,\n        bytes32 randomNumber\n    ) internal virtual;\n}\n"
      },
      "npm/@pythnetwork/entropy-sdk-solidity@2.1.0/IEntropyV2.sol": {
        "content": "// SPDX-License-Identifier: Apache 2\npragma solidity ^0.8.0;\n\nimport \"./EntropyEvents.sol\";\nimport \"./EntropyEventsV2.sol\";\nimport \"./EntropyStructsV2.sol\";\n\ninterface IEntropyV2 is EntropyEventsV2 {\n    /// @notice Request a random number using the default provider with default gas limit\n    /// @return assignedSequenceNumber A unique identifier for this request\n    /// @dev The address calling this function should be a contract that inherits from the IEntropyConsumer interface.\n    /// The `entropyCallback` method on that interface will receive a callback with the returned sequence number and\n    /// the generated random number.\n    ///\n    /// `entropyCallback` will be run with the provider's configured default gas limit.\n    ///\n    /// This method will revert unless the caller provides a sufficient fee (at least `getFeeV2()`) as msg.value.\n    /// Note that the fee can change over time. Callers of this method should explicitly compute `getFeeV2()`\n    /// prior to each invocation (as opposed to hardcoding a value). Further note that excess value is *not* refunded to the caller.\n    ///\n    /// Note that this method uses an in-contract PRNG to generate the user's contribution to the random number.\n    /// This approach modifies the security guarantees such that a dishonest validator and provider can\n    /// collude to manipulate the result (as opposed to a malicious user and provider). That is, the user\n    /// now trusts the validator honestly draw a random number. If you wish to avoid this trust assumption,\n    /// call a variant of `requestV2` that accepts a `userRandomNumber` parameter.\n    function requestV2()\n        external\n        payable\n        returns (uint64 assignedSequenceNumber);\n\n    /// @notice Request a random number using the default provider with specified gas limit\n    /// @param gasLimit The gas limit for the callback function.\n    /// @return assignedSequenceNumber A unique identifier for this request\n    /// @dev The address calling this function should be a contract that inherits from the IEntropyConsumer interface.\n    /// The `entropyCallback` method on that interface will receive a callback with the returned sequence number and\n    /// the generated random number.\n    ///\n    /// `entropyCallback` will be run with the `gasLimit` provided to this function.\n    /// The `gasLimit` will be rounded up to a multiple of 10k (e.g., 19000 -> 20000), and furthermore is lower bounded\n    /// by the provider's configured default limit.\n    ///\n    /// This method will revert unless the caller provides a sufficient fee (at least `getFeeV2(gasLimit)`) as msg.value.\n    /// Note that the fee can change over time. Callers of this method should explicitly compute `getFeeV2(gasLimit)`\n    /// prior to each invocation (as opposed to hardcoding a value). Further note that excess value is *not* refunded to the caller.\n    ///\n    /// Note that this method uses an in-contract PRNG to generate the user's contribution to the random number.\n    /// This approach modifies the security guarantees such that a dishonest validator and provider can\n    /// collude to manipulate the result (as opposed to a malicious user and provider). That is, the user\n    /// now trusts the validator honestly draw a random number. If you wish to avoid this trust assumption,\n    /// call a variant of `requestV2` that accepts a `userRandomNumber` parameter.\n    function requestV2(\n        uint32 gasLimit\n    ) external payable returns (uint64 assignedSequenceNumber);\n\n    /// @notice Request a random number from a specific provider with specified gas limit\n    /// @param provider The address of the provider to request from\n    /// @param gasLimit The gas limit for the callback function\n    /// @return assignedSequenceNumber A unique identifier for this request\n    /// @dev The address calling this function should be a contract that inherits from the IEntropyConsumer interface.\n    /// The `entropyCallback` method on that interface will receive a callback with the returned sequence number and\n    /// the generated random number.\n    ///\n    /// `entropyCallback` will be run with the `gasLimit` provided to this function.\n    /// The `gasLimit` will be rounded up to a multiple of 10k (e.g., 19000 -> 20000), and furthermore is lower bounded\n    /// by the provider's configured default limit.\n    ///\n    /// This method will revert unless the caller provides a sufficient fee (at least `getFeeV2(provider, gasLimit)`) as msg.value.\n    /// Note that provider fees can change over time. Callers of this method should explicitly compute `getFeeV2(provider, gasLimit)`\n    /// prior to each invocation (as opposed to hardcoding a value). Further note that excess value is *not* refunded to the caller.\n    ///\n    /// Note that this method uses an in-contract PRNG to generate the user's contribution to the random number.\n    /// This approach modifies the security guarantees such that a dishonest validator and provider can\n    /// collude to manipulate the result (as opposed to a malicious user and provider). That is, the user\n    /// now trusts the validator honestly draw a random number. If you wish to avoid this trust assumption,\n    /// call a variant of `requestV2` that accepts a `userRandomNumber` parameter.\n    function requestV2(\n        address provider,\n        uint32 gasLimit\n    ) external payable returns (uint64 assignedSequenceNumber);\n\n    /// @notice Request a random number from a specific provider with a user-provided random number and gas limit\n    /// @param provider The address of the provider to request from\n    /// @param userRandomNumber A random number provided by the user for additional entropy\n    /// @param gasLimit The gas limit for the callback function. Pass 0 to get a sane default value -- see note below.\n    /// @return assignedSequenceNumber A unique identifier for this request\n    /// @dev The address calling this function should be a contract that inherits from the IEntropyConsumer interface.\n    /// The `entropyCallback` method on that interface will receive a callback with the returned sequence number and\n    /// the generated random number.\n    ///\n    /// `entropyCallback` will be run with the `gasLimit` provided to this function.\n    /// The `gasLimit` will be rounded up to a multiple of 10k (e.g., 19000 -> 20000), and furthermore is lower bounded\n    /// by the provider's configured default limit.\n    ///\n    /// This method will revert unless the caller provides a sufficient fee (at least `getFeeV2(provider, gasLimit)`) as msg.value.\n    /// Note that provider fees can change over time. Callers of this method should explicitly compute `getFeeV2(provider, gasLimit)`\n    /// prior to each invocation (as opposed to hardcoding a value). Further note that excess value is *not* refunded to the caller.\n    function requestV2(\n        address provider,\n        bytes32 userRandomNumber,\n        uint32 gasLimit\n    ) external payable returns (uint64 assignedSequenceNumber);\n\n    /// @notice Get information about a specific entropy provider\n    /// @param provider The address of the provider to query\n    /// @return info The provider information including configuration, fees, and operational status\n    /// @dev This method returns detailed information about a provider's configuration and capabilities.\n    /// The returned ProviderInfo struct contains information such as the provider's fee structure and gas limits.\n    function getProviderInfoV2(\n        address provider\n    ) external view returns (EntropyStructsV2.ProviderInfo memory info);\n\n    /// @notice Get the address of the default entropy provider\n    /// @return provider The address of the default provider\n    /// @dev This method returns the address of the provider that will be used when no specific provider is specified\n    /// in the requestV2 calls. The default provider can be used to get the base fee and gas limit information.\n    function getDefaultProvider() external view returns (address provider);\n\n    /// @notice Get information about a specific request\n    /// @param provider The address of the provider that handled the request\n    /// @param sequenceNumber The unique identifier of the request\n    /// @return req The request information including status, random number, and other metadata\n    /// @dev This method allows querying the state of a previously made request. The returned Request struct\n    /// contains information about whether the request was fulfilled, the generated random number (if available),\n    /// and other metadata about the request.\n    function getRequestV2(\n        address provider,\n        uint64 sequenceNumber\n    ) external view returns (EntropyStructsV2.Request memory req);\n\n    /// @notice Get the fee charged by the default provider for the default gas limit\n    /// @return feeAmount The fee amount in wei\n    /// @dev This method returns the base fee required to make a request using the default provider with\n    /// the default gas limit. This fee should be passed as msg.value when calling requestV2().\n    /// The fee can change over time, so this method should be called before each request.\n    function getFeeV2() external view returns (uint128 feeAmount);\n\n    /// @notice Get the fee charged by the default provider for a specific gas limit\n    /// @param gasLimit The gas limit for the callback function\n    /// @return feeAmount The fee amount in wei\n    /// @dev This method returns the fee required to make a request using the default provider with\n    /// the specified gas limit. This fee should be passed as msg.value when calling requestV2(gasLimit).\n    /// The fee can change over time, so this method should be called before each request.\n    function getFeeV2(\n        uint32 gasLimit\n    ) external view returns (uint128 feeAmount);\n\n    /// @notice Get the fee charged by a specific provider for a request with a given gas limit\n    /// @param provider The address of the provider to query\n    /// @param gasLimit The gas limit for the callback function\n    /// @return feeAmount The fee amount in wei\n    /// @dev This method returns the fee required to make a request using the specified provider with\n    /// the given gas limit. This fee should be passed as msg.value when calling requestV2(provider, gasLimit)\n    /// or requestV2(provider, userRandomNumber, gasLimit). The fee can change over time, so this method\n    /// should be called before each request.\n    function getFeeV2(\n        address provider,\n        uint32 gasLimit\n    ) external view returns (uint128 feeAmount);\n}\n"
      },
      "project/contracts/EventRouter.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport { IEntropyConsumer } from \"@pythnetwork/entropy-sdk-solidity/IEntropyConsumer.sol\";\r\nimport { IEntropyV2 } from \"@pythnetwork/entropy-sdk-solidity/IEntropyV2.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ninterface IEvent {\r\n    struct TierBookingMetric {\r\n        uint256 totalBookings;\r\n        uint256 totalPremiumBookings;\r\n        uint256 totalGenBookings;\r\n    }\r\n\r\n    struct TierData {\r\n        uint256 genPrice;\r\n        uint256 premiumPrice;\r\n        uint256 maxSupply;\r\n        uint256 premiumMaxSupply;\r\n        uint256 genSeed;\r\n        uint256 premiumSeed;\r\n    }\r\n\r\n    function RegisterBooking(uint256 tierId, uint256 slot, address user) external;\r\n    function unregisterBooking(uint256 tierId, uint256 slot, address user) external;\r\n    function seedAllotment(uint256 tierId, uint256 genSeed, uint256 premiumSeed) external;\r\n    function getBookingMetric(uint256 tierId) external view returns (TierBookingMetric memory);\r\n    function isAlloted(address user, uint256 tierId) external view returns (bool);\r\n    function revealTime() external view returns (uint256);\r\n    function getTierData(uint256 tierId) external view returns (TierData memory);\r\n    function getTicketPrice(uint256 tierId, uint256 slot) external view returns (uint256);\r\n    function claimRefundAndRewards(address user, uint256 tierId) external;\r\n}\r\n\r\n// Add interface for TicketNFT\r\ninterface ITicketNFT {\r\n    function mint(address to, uint256 id) external;\r\n}\r\n\r\n/// @title EventRouter contract will be used to route the calls to the correct event contract\r\n/// @author @Rushikesh0125 \r\n/// @notice Contract to route the calls to the correct event contract\r\n\r\ncontract EventRouter is IEntropyConsumer {\r\n    error Unauthorized();\r\n    error ZeroAddress(string);\r\n    error InvalidEvent();\r\n    error InvalidData(string);\r\n    error NotAlloted();\r\n    error AlreadyClaimed();\r\n\r\n    address public factory;\r\n    address public owner;\r\n    uint256 public nextEventId;\r\n\r\n    IEntropyV2 public entropyV2;\r\n    IERC20 public pyUsd;\r\n\r\n    mapping(uint256 => address) public eventAddresses; // \r\n    mapping(uint256 => address) public ticketNFTAddresses;\r\n\r\n    // Add struct and mapping for pending seeds\r\n    struct PendingSeed {\r\n        uint256 eventId;\r\n        uint256 tierId;\r\n    }\r\n\r\n    mapping(uint64 => PendingSeed) public pendingSeeds;\r\n\r\n    // Add claimed mapping\r\n    mapping(uint256 eventId => mapping(uint256 tierId => mapping(address => bool))) public claimed;\r\n\r\n    modifier onlyFactory() {\r\n        if (msg.sender != factory) revert Unauthorized();\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) revert Unauthorized();\r\n        _;\r\n    }\r\n\r\n    constructor(address _entropyV2, address _pyUsd) {\r\n        if (_entropyV2 == address(0)) revert ZeroAddress(\"EntropyV2\");\r\n        owner = msg.sender; // Set initial owner\r\n        entropyV2 = IEntropyV2(_entropyV2);\r\n        pyUsd = IERC20(_pyUsd);\r\n    }\r\n\r\n    function setFactory(address _factory) external onlyOwner {\r\n        factory = _factory;\r\n    }\r\n\r\n    function setPyUsd(address _pyUsd) external onlyOwner {\r\n        if (_pyUsd == address(0)) revert ZeroAddress(\"PYUSD\");\r\n        pyUsd = IERC20(_pyUsd);\r\n    }\r\n\r\n    function setEntropyV2(address _entropyV2) external onlyOwner {\r\n        if (_entropyV2 == address(0)) revert ZeroAddress(\"EntropyV2\");\r\n        entropyV2 = IEntropyV2(_entropyV2);\r\n    }\r\n\r\n    function setOwner(address _owner) external onlyOwner {\r\n        if (_owner == address(0)) revert ZeroAddress(\"Owner\");\r\n        owner = _owner;\r\n    }\r\n\r\n    function registerEvent(\r\n        address eventAddr,\r\n        address ticketNFTAddr\r\n    ) external onlyFactory returns (uint256 eventId) {\r\n        if (eventAddr == address(0) || ticketNFTAddr == address(0))\r\n            revert InvalidEvent();\r\n        eventId = nextEventId++;\r\n        eventAddresses[eventId] = eventAddr;\r\n        ticketNFTAddresses[eventId] = ticketNFTAddr;\r\n    }\r\n\r\n    // Routed functions\r\n    function registerBooking(\r\n        uint256 eventId,\r\n        uint256 tierId,\r\n        uint256 slot\r\n    ) external {\r\n        address eventAddr = eventAddresses[eventId];\r\n        if (eventAddr == address(0)) revert InvalidEvent();\r\n\r\n        uint256 price = IEvent(eventAddr).getTicketPrice(tierId, slot);\r\n\r\n        IEvent(eventAddr).RegisterBooking(tierId, slot, msg.sender);\r\n        bool success = pyUsd.transferFrom(msg.sender, eventAddr, price);\r\n        require(success, \"PyUSD transfer failed\");\r\n    }\r\n\r\n    function unregisterBooking(\r\n        uint256 eventId,\r\n        uint256 tierId,\r\n        uint256 slot\r\n    ) external {\r\n        address eventAddr = eventAddresses[eventId];\r\n        if (eventAddr == address(0)) revert InvalidEvent();\r\n        IEvent(eventAddr).unregisterBooking(tierId, slot, msg.sender);\r\n    }\r\n\r\n    function seedAllotment(\r\n        uint256 eventId,\r\n        uint256 tierId,\r\n        uint256 genSeed,\r\n        uint256 premiumSeed\r\n    ) external onlyOwner {\r\n        // Adjust modifier if VRF callback\r\n        address eventAddr = eventAddresses[eventId];\r\n        if (eventAddr == address(0)) revert InvalidEvent();\r\n        IEvent(eventAddr).seedAllotment(tierId, genSeed, premiumSeed);\r\n    }\r\n\r\n    function getBookingMetric(\r\n        uint256 eventId,\r\n        uint256 tierId\r\n    ) external view returns (IEvent.TierBookingMetric memory) {\r\n        address eventAddr = eventAddresses[eventId];\r\n        if (eventAddr == address(0)) revert InvalidEvent();\r\n        IEvent.TierBookingMetric memory metric = IEvent(eventAddr)\r\n            .getBookingMetric(tierId);\r\n        return metric;\r\n    }\r\n\r\n    function isAlloted(\r\n        uint256 eventId,\r\n        address user,\r\n        uint256 tierId\r\n    ) external view returns (bool) {\r\n        address eventAddr = eventAddresses[eventId];\r\n        if (eventAddr == address(0)) revert InvalidEvent();\r\n        return IEvent(eventAddr).isAlloted(user, tierId);\r\n    }\r\n\r\n    function requestRandomNumber() external payable {\r\n        uint256 fee = entropyV2.getFeeV2();\r\n        \r\n        uint64 sequenceNumber = entropyV2.requestV2{ value: fee }();\r\n    }\r\n\r\n    function requestSeedAllotmentForEvent(uint256 eventId, uint256[] memory tierIds) external onlyOwner payable {\r\n        address eventAddr = eventAddresses[eventId];\r\n        if (eventAddr == address(0)) revert InvalidEvent();\r\n        uint256 numTiers = tierIds.length;\r\n        if (numTiers == 0) revert InvalidData(\"No tiers\");\r\n    \r\n        uint256 fee = entropyV2.getFeeV2();\r\n        uint256 totalFee = fee * numTiers;\r\n        if (msg.value < totalFee) revert InvalidData(\"Insufficient fee\");\r\n    \r\n        for (uint256 i = 0; i < numTiers; i++) {\r\n            uint64 sequence = entropyV2.requestV2{value: fee}();\r\n            pendingSeeds[sequence] = PendingSeed(eventId, tierIds[i]);\r\n        }\r\n    \r\n        // Refund excess\r\n        if (msg.value > totalFee) {\r\n            payable(msg.sender).transfer(msg.value - totalFee);\r\n        }\r\n    }\r\n \r\n    function claimTicket(uint256 eventId, uint256 tierId) external {\r\n        address eventAddr = eventAddresses[eventId];\r\n        if (eventAddr == address(0)) revert InvalidEvent();\r\n    \r\n        if (block.timestamp < IEvent(eventAddr).revealTime()) revert InvalidData(\"Not revealed yet\");\r\n        if (!IEvent(eventAddr).isAlloted(msg.sender, tierId)) revert NotAlloted();\r\n        if (claimed[eventId][tierId][msg.sender]) revert AlreadyClaimed();\r\n    \r\n        claimed[eventId][tierId][msg.sender] = true;\r\n    \r\n        address nftAddr = ticketNFTAddresses[eventId];\r\n        if (nftAddr == address(0)) revert InvalidEvent();\r\n    \r\n        ITicketNFT(nftAddr).mint(msg.sender, tierId); // Assuming tierId is the tokenId, starting from 1 to n\r\n    }\r\n\r\n    function claimRefundAndRewards(uint256 eventId, uint256 tierId) external {\r\n        address eventAddr = eventAddresses[eventId];\r\n        if (eventAddr == address(0)) revert InvalidEvent();\r\n        \r\n        IEvent(eventAddr).claimRefundAndRewards(msg.sender, tierId);\r\n    }\r\n\r\n    // Add other routed functions as needed, e.g., setRouterAddress if applicable\r\n    function getEntropy() internal view virtual override returns (address) {\r\n        return address(entropyV2);\r\n    }\r\n\r\n    function entropyCallback(\r\n        uint64 sequence,\r\n        address provider,\r\n        bytes32 randomNumber\r\n    ) internal virtual override {\r\n        PendingSeed memory pend = pendingSeeds[sequence];\r\n        if (pend.eventId == 0) revert InvalidData(\"Unknown sequence\");\r\n    \r\n        // Derive two seeds from randomNumber\r\n        uint256 genSeed = uint256(randomNumber);\r\n        uint256 premiumSeed = uint256(keccak256(abi.encodePacked(randomNumber, pend.tierId)));\r\n    \r\n        address eventAddr = eventAddresses[pend.eventId];\r\n        if (eventAddr == address(0)) revert InvalidEvent();\r\n    \r\n        IEvent(eventAddr).seedAllotment(pend.tierId, genSeed, premiumSeed);\r\n    \r\n        // Clean up\r\n        delete pendingSeeds[sequence];\r\n    }\r\n}\r\n"
      }
    }
  }
}